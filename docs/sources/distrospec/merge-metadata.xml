<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "AppStream.ent">
%BOOK_ENTITIES;
]>

<section id="sect-AppStream-DataMerge">
	<title>Merging metadata</title>

	<section id="spec-merge-introduction">
		<title>Introduction</title>
		<para>
			Sometimes it is required to merge new metadata into existing metadata that is shipped by a different party.
			This includes tools which want to inject recommendations into the AppStream metadata pool, or vendors who want
			to augment the data shipped by their distribution with custom information (e.g. custom icons or categories).
		</para>
		<para>
			To make this task easier, a special <literal>merge</literal> component type exists, which is only valid in distro metadata.
			The <literal>merge</literal> component type is not a component type in the classical sense. It is used to extend or override
			metadata provided by a different component with the same <literal>id</literal>.
		</para>
	</section>

	<section id="spec-merge-example">
		<title>Example</title>
		<para>
			If you want to add the components <code>org.example.FooBar</code> and <code>org.example.Frobnicate</code> to
			the category <code>Video</code> and also rename the component <code>org.example.Frobnicate</code>, this can
			be achieved by dropping a file like this one into the distro metadata pool directory:
		</para>
		<programlisting language="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<components origin="vendor-customization">
  <component type="merge">
    <id>org.example.FooBar</id>
    <categories>
      <category>Video</category>
    </categories>
  </component>

  <component type="merge">
    <id>org.example.Frobnicate</id>
    <name>MyVendor Frobnicator</name>
    <categories>
      <category>Video</category>
    </categories>
  </component>
</components>]]></programlisting>
	</section>

	<section id="spec-merge-filespec">
		<title>File specification</title>
		<para>
			The <literal>merge</literal> component type is only valid in distro metadata and may never be used in metainfo files.
			The <literal>component</literal> tag must have its <literal>type</literal> attribute set to <code>merge</code> to create
			a valid merge component.
		</para>

		<para>
			The <code>&lt;id/&gt;</code> tag is the only required tag for <literal>merge</literal> component. It defines the ID of
			the component whose data should be extended or overriden.
		</para>
	</section>

	<section id="spec-merge-rules">
		<title>Merge rules</title>
		<para>
			When merging metadata, AppStream implementations have to follow these rules to fold in <literal>merge</literal> component data
			into the data of the target component:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					If the <literal>priority</literal> of the <literal>merge</literal> component and its target component are equal, or if the priority of the <literal>merge</literal>
					component is &lt;= 0, the merge component will <emphasis>override</emphasis> the target components data for all non-list values (e.g. <literal>name</literal>, <literal>description</literal>,
					<literal>url</literal> types, etc.). For all list types (e.g. <literal>categories</literal>, <literal>provides</literal>, etc.) it will extend the list and append the new value to
					the preexisting values.
				</para>
			</listitem>
			<listitem>
				<para>
					If the <literal>priority</literal> of the <literal>merge</literal> component is bigger than the one of its target component, the merge component will <emphasis>override</emphasis>
					the target components data for all values. This includes list-types, which get set to the exact value present in the <literal>merge</literal> component.
				</para>
			</listitem>
			<listitem>
				<para>
					If there are multiple <literal>merge</literal> components, the one with the highest priority wins over the one with the lower priority.
				</para>
			</listitem>
			<listitem>
				<para>
					In case the merge components have equal priorities and try to change the same value of the target component, the behavior is undefined.
				</para>
			</listitem>
		</itemizedlist>
	</section>
</section>
